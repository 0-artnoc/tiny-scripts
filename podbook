#!/bin/bash

readonly program="$(basename "${0}")"
readonly audio_extentions=('aac' 'm4a' 'm4b' 'mp3')
readonly audio_files_regex="$(sed 's/ /|/g;s/^/^.*\\.(/;s/$/)$/' <<< "${audio_extentions[@]}")"

function syntax_error {
  echo "${program}: ${1}" >&2
  echo "Try \`${program} --help\` for more information." >&2
  exit 1
}

function usage {
  echo "
    usage: ${program} [options]

    options:
      -t <string>, --title <string>    Book title. Defaults to trying to extract it from the first audio file or the directory’s name (in that order). In the latter case, '_' will be interpreted as ':'.
      -a <string>, --author <string>   Book author. Defaults to trying to extract it from the first audio file.
      -c <url>, --cover <url>          URL to image of book cover. Defaults to trying to extract it from the first audio file.
      -n, --no-tag-overwrite           Do not overwrite audio file tags. By default they are overwritten with extracted/given details.
      -h, --help                       Show this help.
  " | sed -E 's/^ {4}//'
}

function color_message {
  local color="${1}"
  local message="${2}"
  readonly local all_colors=('black' 'red' 'green' 'yellow' 'blue' 'magenta' 'cyan' 'white')

  for i in "${!all_colors[@]}"; do
    if [[ "${all_colors[${i}]}" == "${color}" ]]; then
      local color_index="${i}"
      echo -e "$(tput setaf "${i}")${message}$(tput sgr0)"
    fi
  done

  if [[ -z "${color_index}" ]]; then
    echo "${FUNCNAME[0]}: '${color}' is not a valid color."
    exit 1
  fi
}

function bold_message {
  echo "$(tput bold)${1}$(tput sgr0)"
}

function fail_message {
  color_message 'red' "${1}" >&2
  exit 1
}

function warning_message {
  color_message 'yellow' "${1}"
}

function absolutepath {
  if [[ -e "${1}" ]]; then
    [[ -d "${1}" ]] && (cd "${1}" && pwd -P) || (cd "$(dirname "${1}")" && echo "$(pwd -P)/$(basename "${1%/}")")
  else
    echo "${FUNCNAME[0]}: no such file or directory: ${1}" >&2
    return 1
  fi
}

function is_number? {
  [[ "${1}" =~ ^[0-9]+$ ]]
}

function fail_if_no_arguments {
  if [[ "$#" -eq 0 ]]; then
    usage
    exit 1
  fi
}

function fail_unless_dir {
  [[ -d "${1}" ]] || fail_message 'You need to point the script at a directory.'
}

function depends_on {
  readonly local all_deps=("${@}")
  local missing_deps=()

  for dep in "${all_deps[@]}"; do
    command -v "${dep}" &>/dev/null || missing_deps+=("${dep}")
  done

  if [[ "${#missing_deps[@]}" -gt 0 ]]; then
    tput setaf 1
    echo -e '\nThis script has unmet dependencies. You need to install these first:'
    printf '  %s\n' "${missing_deps[@]}"
    tput sgr0
    exit 1
  fi
}

function upload_file {
  local file_name="${1}"

  echo "Uploading $(basename "${file_name}")…" >&2
  curl --silent --upload-file "${file_name}" https://transfer.sh/
}

function extract_title {
  local file_name book_dir book_title
  readonly file_name="${1}"
  readonly book_dir="${2}"

  readonly book_title="$(eyeD3 "${file_name}" 2> /dev/null | sed 's/.\[[0-9]\{1,\}m//g' | grep '^album: ' | cut -d' ' -f2-)"
  [[ -n "${book_title}" ]] && echo -n "${book_title}" || sed 's/_/:/g' < <(basename "${book_dir}")
}

function extract_author {
  local file_name book_author
  readonly file_name="${1}"

  readonly book_author="$(eyeD3 "${file_name}" 2> /dev/null | sed 's/.\[[0-9]\{1,\}m//g' | grep '^artist: ' | cut -d' ' -f2-)"
  [[ -n "${book_author}" ]] && echo -n "${book_author}" || request_author
}

function request_author {
  local book_author

  echo 'The book author could not be automatically determined.' >&2
  read -rp 'Insert book author: ' book_author

  echo -n "${book_author}"
}

function extract_cover {
  local file_name book_dir book_cover
  readonly file_name="${1}"
  readonly book_dir="${2}"

  eyeD3 --write-images="${book_dir}" "${file_name}" &> /dev/null
  readonly book_cover="$(find "${book_dir}" -name 'FRONT_COVER.*')"

  if [[ -n "${book_cover}" ]]; then
    upload_file "${book_cover}"
    rm "${book_cover}"
  else
    request_cover
  fi
}

function request_cover {
  local book_cover

  echo 'The book cover could not be automatically extracted.' >&2
  read -rp 'Insert URL to cover image: ' book_cover

  echo -n "${book_cover}"
}

function extract_duration {
  local file_name file_duration
  readonly file_name="${1}"

  readonly file_duration="$(eyeD3 "${file_name}" 2> /dev/null | sed 's/.\[[0-9]\{1,\}m//g' | awk '/^Time:/{print $2}')"
  echo -n "${file_duration}"
}

function extract_mime {
  local file_name file_mime
  readonly file_name="${1}"

  readonly file_mime="$(file --mime-type "${file_name}" | sed 's/.*: //')"
  echo -n "${file_mime}"
}

function extract_size {
  local file_name file_size
  readonly file_name="${1}"

  readonly file_size="$(du "${file_name}" | perl -pe 's/\t.*//')"
  echo -n "${file_size}"
}

function fix_tags {
  local book_title book_author book_cover item_title file_name
  readonly book_title="${1}"
  readonly book_author="${2}"
  readonly book_cover="${3}"
  readonly item_title="${4}"
  readonly file_name="${5}"

  # Download cover to temporary location
  if [[ -z "${downloaded_cover}" ]]; then
    readonly local cover_file_extension="$([[ "${book_cover}" = *.* ]] && echo ".${book_cover##*.}" || echo '')"
    readonly local tmp_cover="$(mktemp)${cover_file_extension}"
    curl --silent "${book_cover}" --output "${tmp_cover}"
    readonly downloaded_cover='true'
  fi

  eyeD3 --remove-all "${file_name}" &> /dev/null # Remove all tags
  eyeD3 --encoding="utf8" --add-image="${tmp_cover}":FRONT_COVER --album="${book_title}" --artist="${book_author}" --title="${item_title}" "${file_name}" &> /dev/null
}

function inform_details {
  local book_title book_author book_cover
  readonly book_title="${1}"
  readonly book_author="${2}"
  readonly book_cover="${3}"

  echo "
    Book details:

    $(bold_message 'title:') ${book_title}
    $(bold_message 'author:') ${book_author}
    $(bold_message 'cover image:') ${book_cover}
  " | sed -E 's/^ {4}//' >&2
}

function start_feed {
  local book_title book_author book_cover book_feed book_dir book_duration
  readonly book_title="${1}"
  readonly book_author="${2}"
  readonly book_cover="${3}"
  readonly book_feed="${4}"
  readonly book_dir="${5}"
  readonly book_duration="$(human-media-time "${book_dir}")"

  echo "
    <rss xmlns:dc='http://purl.org/dc/elements/1.1/' xmlns:sy='http://purl.org/rss/1.0/modules/syndication/' xmlns:admin='http://webns.net/mvcb/' xmlns:atom='http://www.w3.org/2005/Atom/' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:content='http://purl.org/rss/1.0/modules/content/' xmlns:itunes='http://www.itunes.com/dtds/podcast-1.0.dtd' version='2.0'>
    <channel>
    <title>${book_title} (${book_duration})</title>
    <description>by ${book_author}</description>
    <image><url>${book_cover}</url></image>
    <pubDate>$(date -R)</pubDate>
  " > "${book_feed}"
}

function add_to_feed {
  local item_title file_time file_duration file_mime file_size file_url book_feed
  item_title="${1}"
  file_time="${2}"
  file_duration="${3}"
  file_mime="${4}"
  file_size="${5}"
  file_url="${6}"
  readonly book_feed="${7}"

  echo "
    <item>
    <title>${item_title}</title>
    <enclosure url='${file_url}' length='${file_size}' type='${file_mime}' />
    <itunes:duration>${file_duration}</itunes:duration>
    <pubDate>${file_time}</pubDate>
    </item>
  " >> "${book_feed}"
}

function end_feed {
  readonly local book_feed="${1}"

  echo "
    </channel>
    </rss>
  " >> "${book_feed}"
}

function main {
  local book_dir book_feed first_audio_file book_title book_author book_cover file_counter file_time file_duration file_mime file_size item_title file_url
  readonly book_dir="$(absolutepath "${1}")"
  fail_unless_dir "${book_dir}"
  book_feed="${book_dir}/feed.rss"

  readonly first_audio_file="$(find -E "${book_dir}" -iregex "${audio_files_regex}" | head -1)"
  [[ -n "${given_title}" ]] && readonly book_title="${given_title}" || readonly book_title="$(extract_title "${first_audio_file}" "${book_dir}")"
  [[ -n "${given_author}" ]] && readonly book_author="${given_author}" || readonly book_author="$(extract_author "${first_audio_file}")"
  [[ -n "${given_cover}" ]] && readonly book_cover="${given_cover}" || readonly book_cover="$(extract_cover "${first_audio_file}" "${book_dir}")"

  inform_details "${book_title}" "${book_author}" "${book_cover}"

  start_feed "${book_title}" "${book_author}" "${book_cover}" "${book_feed}" "${book_dir}"

  file_counter='0'
  while IFS= read -r -d '' file; do
    file_counter="$((file_counter + 1))"
    file_time="$(date -R -v +"${file_counter}"M)"
    file_duration="$(extract_duration "${file}")"
    file_mime="$(extract_mime "${file}")"
    file_size="$(extract_size "${file}")"
    item_title="$(basename "${file%.*}")"

    [[ "${overwrite_tags:-true}" == 'true' ]] && fix_tags "${book_title}" "${book_author}" "${book_cover}" "${item_title}" "${file}"

    file_url="$(upload_file "${file}")"

    add_to_feed "${item_title}" "${file_time}" "${file_duration}" "${file_mime}" "${file_size}" "${file_url}" "${book_feed}"
  done < <(find -E "${book_dir}" -iregex "${audio_files_regex}" -print0)

  end_feed "${book_feed}"

  echo
  upload_file "${book_feed}"
  rm "${book_feed}"
}

depends_on 'eyeD3' 'human-media-time'

while [[ "${1}" ]]; do
  case "${1}" in
    -h | --help)
      usage
      exit 0
      ;;
    -t | --title)
      readonly given_title="${2}"
      shift
      ;;
    -a | --author)
      readonly given_author="${2}"
      shift
      ;;
    -c | --cover)
      readonly given_cover="${2}"
      shift
      ;;
    -n | --no-tag-overwrite)
      readonly overwrite_tags='false'
      ;;
    -*)
      syntax_error "unrecognized option: ${1}"
      ;;
    *)
      break
      ;;
  esac
  shift
done

fail_if_no_arguments "${@}"

for dir in "${@}"; do
  main "${dir}"
done
