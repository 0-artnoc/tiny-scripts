#!/bin/bash

IFS=$'\n'
readonly program="$(basename "${0}")"

syntax_error() {
  echo "${program}: ${1}" >&2
  echo "Try \`${program} --help\` for more information." >&2
  exit 1
}

# usage instructions
usage() {
  echo "
    usage: ${program} [options]

    options:
      -i <dropbox_id>, --id <dropbox_id>              Set your dropbox Public diretory ID.
      -t <title>, --title <title>                     Set the podcast's title.
      -d <description>, --description <description>   Set the podcast's description.
      -h, --help                                      Show this message.
  " | sed -E 's/^ {4}//'
}

# options to use
while [[ "${1}" ]]; do
  case "${1}" in
    -h | --help)
      usage
      exit 0
      ;;
    -i | --id)
      dropbox_id="${2}"
      shift
      ;;
    -t | --title)
      podcast_title="${2}"
      shift
      ;;
    -d | --description)
      podcast_description="${2}"
      shift
      ;;
    -*)
      syntax_error "unrecognized option: ${1}"
      ;;
  esac
  shift
done

# files
dropbox_id_file="${HOME}/.podbook"
podcast_file=$(echo -n "${podcast_title}.rss" | tr -d ' ')

# check for dropbox_id
if [[ -z "${dropbox_id}" ]]; then
  if [[ -f "${dropbox_id_file}" ]]; then
    dropbox_id=$(cat "${dropbox_id_file}")
  else
    echo -e "You need to set your Dropbox Public directory ID, via the '-i' flag.\nAlternatively, put a '.podbook' file inside your home diretory, with your id in a single line"
    exit 1
  fi
fi

# exit if title is missing
if [[ -z "${podcast_title}" ]]; then
  echo "You need to set a podcast title"
  usage
  exit 1
fi

# check if inside Dropbox/Public
public_dir=$(pwd | perl -pe 's|.*(Dropbox/Public).*|\1|')
if [[ -z "${public_dir}" ]]; then
  echo "You need to be inside your 'Dropbox/Public' directory (or a subdirectory of it)"
  exit 1
fi

# current subdirectory inside Dropbox/Public
current_dir=$(pwd | perl -pe 's|.*(Dropbox/Public)(.*)|\2|')
# if not a subdirectory, set it accordingly
[[ -z "${current_dir}" ]] && current_dir="/"

current_time=$(date "+%a, %b %d %T %Z %Y")

file_types() {
  find . -depth 1 -type f -name '*.m4a' -or -name '*.mp3' -or -name '*.mov' -or -name '*.mp4' -or -name '*.m4v' -or -name '*.pdf' -or -name '*.epub'
}

# get fist jpg or png in the directory for the artwork
artwork=$(find . -depth 1 -type f -name '*jpg' -or -name '*jpeg' -or -name '*png' | head -1 | xargs basename | perl -MHTML::Entities -CS -pe'$_ = encode_entities($_, "&<")')

# functions to write the xml
xmlStart() {
podcast_xml="<?xml version='1.0' encoding='utf-8'?>
<rss version='2.0'>
<channel>
<title>${podcast_title}</title>
<description>${podcast_description}</description>
<image><url>https://dl.dropboxusercontent.com/u/${dropbox_id}${current_dir}/${artwork}</url></image>
<pubDate>${current_time}</pubDate>"
}

xmlEnd() {
podcast_xml+="</channel>
</rss>"
}

xmlItem() {
file_name=$(echo "${1}" | sed 's|\./||' | perl -MHTML::Entities -CS -pe'$_ = encode_entities($_, "&<")')
item_title="${file_name%.*}"
item_url="https://dl.dropboxusercontent.com/u/${dropbox_id}${current_dir}/${file_name}"

podcast_xml+="<item>
<title>${item_title}</title>
<enclosure url=\"${item_url}\"/>
</item>"
}

# write the xml
xmlStart
for file in $(file_types); do
  xmlItem "${file}"
done
xmlEnd

echo "${podcast_xml}" > "${podcast_file}"

# copy the url of podcast_file to the clipboard
echo -n "https://dl.dropboxusercontent.com/u/${dropbox_id}${current_dir}/${podcast_file}" | pbcopy
echo "Podcast feed url copied to clipboard"
