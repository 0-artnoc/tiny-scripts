#!/bin/bash

readonly program="$(basename "${0}")"

function depends_on {
  local -r dep="${1}"

  if ! command -v "${dep}" &>/dev/null; then
    echo -e >&2 "\n$(tput setaf 1)This script requires ${dep}. Please install it first.$(tput sgr0)\n"
    exit 1
  fi
}

function syntax_error {
  echo -e "${program}: ${1}\nTry \`${program} --help\` for more information." >&2
  exit 1
}

function get_output_path {
  local -r force="${1}"
  local -r ext="${2}"
  local -r input_path="${3}"
  local -r init_output_path="${4}"

  local -r output_path="$(
    if [[ -n "${init_output_path}" ]]; then
      [[ "${init_output_path##*.}" == "${ext}" ]] && echo "${init_output_path}" || echo "${init_output_path}${ext}"
    else
      echo "$(pwd -P)/$(basename "${input_path%.*}${ext}")"
    fi
  )"

  echo "${output_path}"

  if [[ "${force}" == 'true' ]]; then
    mkdir -p "$(dirname "${output_path}")"
    return 0
  fi

  if [[ ! -d "$(dirname "${output_path}")" ]]; then
    echo "Cannot create '${output_path}'. Parent directory does not exist." >&2
    exit 1
  fi

  if [[ -e "${output_path}" ]]; then
    echo "Cannot write to '${output_path}'. Already exists." >&2
    exit 1
  fi
}

function usage {
  echo "
    Usage:
      ${program} [-d <duration>] [-s <time>] [-o <output_file>] <input_file>

    Options:
      -d <number>, --duration <number>   Duration (in seconds) of the output file. Maximum is 40 seconds.
      -o <file>, --output-file <file>    File to output to. Default is with same name on current directory.
      -O, --overwrite                    Create intermediary directories and overwrite output.
      -s <time>, --start <time>          Start time from when to start cutting, in the form xx:xx:xx
      -h, --help                         Show this help.
  " | sed -E 's/^ {4}//'
}

# available flags
args=()
while [[ "${1}" ]]; do
  case "${1}" in
    -h | --help)
      usage
      exit 0
      ;;
    -d | --duration)
      duration="${2}"
      shift
      ;;
    -o | --output-file)
      given_output_path="${2}"
      shift
      ;;
    -O | --overwrite)
      readonly overwrite='true'
      ;;
    -s | --start)
      start="${2}"
      shift
      ;;
    --)
      shift
      args+=("${@}")
      break
      ;;
    -*)
      syntax_error "Unrecognised option: ${1}"
      ;;
    *)
      args+=("${1}")
      ;;
  esac
  shift
done
set -- "${args[@]}"

depends_on 'ffmpeg'

readonly input_file="${1}"
readonly output_file="$(get_output_path "${overwrite:-false}" '.m4r' "${input_file}" "${given_output_path}")"

if [[ "${#}" -ne 1 || ! -f "${input_file}" ]]; then
  usage
  exit 1
fi

[[ -z "${duration}" || "${duration}" -gt 40 ]] && duration='40'
[[ -z "${start}" ]] && start='00:00:00'

ffmpeg -i "${input_file}" -vn -acodec aac -f mp4 -ss "${start}" -t "${duration}" "${output_file}"
