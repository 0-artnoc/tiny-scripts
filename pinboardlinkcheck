#!/bin/bash

readonly program="$(basename "${0}")"
readonly browser_headers=(--header 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36')

syntax_error() {
  echo "${program}: ${1}" >&2
  echo "Try \`${program} --help\` for more information." >&2
  exit 1
}

# instructions
usage() {
  echo "
    usage: ${program} [options]

    options:
      -r, --redirect-log    If set, links with 301 (Moved permanently) will be on their own log.
      -t, --token <token>   Your Pinboard API token.
      -a, --ask-for-token   Ask for your Pinboard API token on start.
      -h, --help            Show this message.
  " | sed -E 's/^ {4}//'
}

# set color for verbose messages
bad() { echo "$(tput setab 1)$(tput setaf 7)${1}$(tput sgr0) ${2}" ;}
good() { echo "$(tput setab 2)$(tput setaf 7)${1}$(tput sgr0) ${2}" ;}
warning() { echo "$(tput setab 3)$(tput setaf 7)${1}$(tput sgr0) ${2}" ;}

# set options
while [[ "${1}" ]]; do
  case "${1}" in
    -h | --help)
      usage
      exit 0
      ;;
    -r | --redirect-log)
      redirect_log='true'
      ;;
    -t | --token)
      token="${1}"
      shift
      ;;
    -a | --ask-for-token)
      ask_for_token='true'
      ;;
    -*)
      syntax_error "unrecognized option: ${1}"
      ;;
  esac
  shift
done

# location for log files
log_file="${HOME}/pinboardlinkcheck.log"
[[ -n "${redirect_log}" ]] && redirect_log_file="${HOME}/pinboardlinkcheck-redirects.log"

# ask for api token, if option is set
if [[ -n "${ask_for_token}" ]]; then
  echo 'Please insert your api token (will not be echoed)'
  echo 'You can get it at https://pinboard.in/settings/password'
  read -sp '> ' token
  echo
fi

# exit if no token was set
if [[ -z "${token}" ]]; then
  usage
  exit 1
fi

# get all your pinboard links
links=$(curl --silent "https://api.pinboard.in/v1/posts/all?auth_token=${token}" | grep '^<post' | cut -d '"' -f 2 | sed '1d')

# check each link individually
for page in ${links} ; do
  status=$(curl --silent "${browser_headers[@]}" --write-out '%{http_code}' --output /dev/null "${page}")

  if [[ "${status:0:1}" == '2' ]]; then
    good "${status}" "${page}"
  elif [[ "${status:0:1}" == '3' ]]; then
    warning "${status}" "${page}"
  else
    bad "${status}" "${page}"
  fi

  # append to log file
  echo "${status} ${page}" >> "${log_file}"
done

# cleanup
# remove every link with a '200' code from the log
sed -i '' '/^200/d' "${log_file}"

# order links by status code
ordered_links=$(cat "${log_file}" | sort)
echo "${ordered_links}" > "${log_file}"

# move 301 links to redirect log, if specified
if [[ -n "${redirect_log}" ]]; then
  redirectlinks=$(cat "${log_file}" | grep '^301' | sed 's/^301 //')

  for page in ${redirectlinks}; do
    redirect_url=$(curl --silent "${browser_headers[@]}" --write-out '%{redirect_url}' --output /dev/null "${page}")
    echo "${page} → ${redirect_url}"
    echo "${page} → ${redirect_url}" >> "${redirect_log_file}"
  done

  # remove 301s from the main log
  sed -i '' '/^301/d' "${log_file}"
fi
