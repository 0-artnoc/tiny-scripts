#!/bin/bash

# instructions
usage() {
echo "usage: $0 [-h] [-v] [-l file] [-r file] [-a token]

options:
  -h   Show this message
  -v   Show the status code for each link as it goes through it
  -r   If set, links with a 301 (Moved permanently) will be on their own log
  -a   Your Pinboard API token (if you don't set it, the script will ask for it)"
}

# set color for verbose messages
bad() { echo "$(tput setab 1)$(tput setaf 7)${1}$(tput sgr0) ${2}" ;}
good() { echo "$(tput setab 2)$(tput setaf 7)${1}$(tput sgr0) ${2}" ;}
warning() { echo "$(tput setab 3)$(tput setaf 7)${1}$(tput sgr0) ${2}" ;}

# set options
while getopts hvra OPTION
do
  case "${OPTION}"
    in
      h) usage ; exit 0;;
      v) verbose="true";;
      r) redirectlog="true";;
      a) token=${OPTARG};;
    esac
done
shift $((OPTIND-1))

# location for log files
logfile="${HOME}/pinboardlinkcheck.log"
[[ -n "${redirectlog}" ]] && redirectlogfile="${HOME}/pinboardlinkcheck-redirects.log"

# ask for api key, if needed
if [[ -z "${token}" ]]; then
  echo 'Please insert your api key'
  echo 'You can get it at https://pinboard.in/settings/password'
  read -p '> ' token
fi

# get all your pinboard links
links=$(curl --silent "https://api.pinboard.in/v1/posts/all?auth_token=${token}" | grep '^<post' | cut -d '"' -f 2 | sed '1d')

# check each link individually
for page in ${links} ; do
  status=$(curl --silent --output /dev/null --write-out "%{http_code}" "${page}")

  # show ouptut if '-v' is set
  if [[ -n "${verbose}" ]]; then
    if [[ "${status:0:1}" == '2' ]]; then
      good "${status}" "${page}"
    elif [[ "${status:0:1}" == '3' ]]; then
      warning "${status}" "${page}"
    else
      bad "${status}" "${page}"
    fi
  fi

  # append to log file
  echo "${status} ${page}" >> "${logfile}"
done

# cleanup
# remove every link with a '200' code from the log
sed -i '' '/^200/d' "${logfile}"

# order links by status code
orderedlinks=$(cat "${logfile}" | sort)
echo "${orderedlinks}" > "${logfile}"

# move 301 links to redirect log, if specified
if [[ -n "${redirectlog}" ]]; then
  redirectlinks=$(cat "${logfile}" | grep '^301' | sed 's/^301 //')

  for page in ${redirectlinks}; do
    redirecturl=$(curl --silent --output /dev/null --write-out "%{redirect_url}" "${page}")
    echo "${page} → ${redirecturl}"
    echo "${page} → ${redirecturl}" >> "${redirectlogfile}"
  done

  # remove 301s from the main log
  sed -i '' '/^301/d' "${logfile}"
fi
