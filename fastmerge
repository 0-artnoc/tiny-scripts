#!/bin/bash

readonly program="$(basename "${0}")"
remote='upstream' # use 'upstream' as default remote

# check if 'ghi' is installed and configured
if [[ ! $(which 'ghi') ]] || ! security find-internet-password -s github.com -l 'ghi token' &> /dev/null; then
  echo -e "$(tput setaf 1)
    This script requires 'ghi' installed and configured.
    If you have [Homebrew](http://brew.sh), you can install it with 'brew install ghi'.
    To configure it, run 'ghi config --auth <username>'. Your Github password will be required, but is never stored.
  $(tput sgr0)" | sed -E 's/ {4}//' >&2
  exit 1
fi

syntax_error() {
  echo "${program}: ${1}" >&2
  echo "Try \`${program} --help\` for more information." >&2
  exit 1
}

usage() {
  echo "
    usage: ${program} [options] <github_pull_request_url>

    Multiple <github_pull_request_url> can be given, and will be processed in sequence.

    options:
      -m, --maintainer                 Use when merging a contribution from a maintainer.
      -r <remote>, --remote <remote>   Use to specify a remote to pull from and push to (defaults to 'upstream').
      -h, --help                       Show this help.
  " | sed -E 's/^ {4}//'
}

# available flags
while [[ "${1}" ]]; do
  case "${1}" in
    -h | --help)
      usage
      exit 0
      ;;
    -m | --maintainer)
      maintainer_pr='true'
      ;;
    -r | --remote)
      remote="${2}"
      shift
      ;;
    -*)
      syntax_error "unrecognized option: ${1}"
      ;;
    *)
      break
      ;;
  esac
  shift
done

message() {
  echo "${1}"
}

abort_patch() {
  if [[ "${1}" == 'revert' ]]; then
    git am --abort
    git reset --hard "${last_commit_remote}"
    shift
  fi

  echo -e "\n$(tput setaf 1)${1}$(tput sgr0)\n"
  exit 1
}

# cleanup if aborted with ⌃C
trap 'abort_patch "You aborted."' SIGINT

check_repo() {
  local_repo=$(git remote show origin -n | grep "Fetch URL:" | sed 's|.*/||;s|\.git$||')
  remote_repo=$(sed -E 's|.*/(.*)/pull.*|\1|' <<< "${url}")
  [[ "${local_repo}" != "${remote_repo}" ]] && abort_patch "You're trying to pull from '${remote_repo}', but you're on '${local_repo}'."
}

pull_remote() { # pull changes if local branch is behind
  last_commit_local=$(git rev-parse refs/heads/master)
  last_commit_remote=$(git ls-remote "${remote}" --heads refs/heads/master | perl -pe 's/\s.*//')
  [[ "${last_commit_local}" != "${last_commit_remote}" ]] && git pull --rebase "${remote}" master --quiet
}

apply_patch() {
  url=$(perl -pe 's|(.*/pull/\d+).*|\1|' <<< "${1}") # clean url of extraneous information
  issue_number=$(sed 's|.*/||' <<< "${url}")
  patch_url="${url}.patch" # github pull request url, ending in '.patch'
  check_repo

  current_branch=$(git rev-parse --abbrev-ref HEAD)
  [[ "${current_branch}" != 'master' ]] && git checkout master --quiet
  pull_remote

  message "Applying #${issue_number} as patch…"

  curl --location --silent "${patch_url}" | git am --quiet # get and apply patch
  [[ "$?" -ne 0 ]] && abort_patch 'revert' "There was an error applying the patch from ${url}. Reverted to last successful state." # if applying the patch was unsuccessful, warn and revert state
}

push_and_close() {
  pull_remote
  git push "${remote}" master --quiet

  if [[ "${maintainer_pr}" == 'true' ]]; then
    ghi close --message "Merged as ${last_commit_local}." "${issue_number}" 1>/dev/null
  else
    ghi close --message "Thank you for the contribution. It was merged directly as ${last_commit_local} to keep commit history cleaner. Your contribution is still credited to you." "${issue_number}" 1>/dev/null
  fi

  message 'Merged and closed issue.'
}

# exit if no argument was given
if [[ -z "${1}" ]]; then
  usage
  exit 1
fi

while [[ "${1}" ]]; do # allow for multiple github PR urls to be passed at once
  if [[ "${1}" =~ https://github.com/* ]]; then
    apply_patch "${1}"
    push_and_close
  else
    usage
    exit 1
  fi
  shift
done
