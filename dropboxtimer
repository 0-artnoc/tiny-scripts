#!/bin/bash

readonly program="$(basename "${0}")"

IFS=$'\n'

# Instructions on how to use the script
# Shown when insufficient arguments are given
# -------------------------------------------
usage() {
  echo "usage: ${program} <number_of_days> <files>"
}

if [[ -z ${2} ]]; then
  usage
  exit 1
fi


# Make sure the directories exist
# -------------------------------
app_directory="${HOME}/Dropbox/Apps/DropboxTimer"
mkdir -p "${app_directory}/.DeleteScripts/"


# Use first argument as number of days to wait
# Make the necessary calculations for when to delete the file
# -----------------------------------------------------------
days_from_now="${1}"
shift

month=$(date -v +"${days_from_now}"d +"%m")
day=$(date -v +"${days_from_now}"d +"%d")
hour=$(date -v +"${days_from_now}"d +"%H")
minute=$(date -v +"${days_from_now}"d +"%M")


# Run main script
# ---------------
for original_file in "${@}"
do

  # Set the file's name
  # If there's already a file with that name, rename the new one by appending the date it's going to be deleted
  new_file="$(basename ${original_file})"

  if [[ -f "${app_directory}/${new_file}" ]]; then
    file_extension="${original_file##*.}"
    file_no_extension="${original_file%.*}"
    new_file="$(basename ${file_no_extension})_$(date -v +"${days_from_now}"d +"%Y-%m-%d_%Hh%M").${file_extension}"

    echo "There's already a file named $(basename ${original_file}) in the directory, the new file will be renamed to ${new_file}"
  fi

  # Set variables needed for launchd, and copy the file to the directory
  label="com.DropboxTimer.${new_file//[^a-zA-Z-0-9_]/}"
  agent="${HOME}/Library/LaunchAgents/${label}.plist"

  cp -R "${original_file}" "${app_directory}/${new_file}"

  # Prepare the script that'll delete the file (and itself)
  script_location="${app_directory}/.DeleteScripts/${label}.sh"
  script="#!/bin/bash
  mv $(printf '%q' ${app_directory}/${new_file}) ${HOME}/.Trash/
  rm ${script_location}
  rm ${agent}
  launchctl remove ${label}"

  echo "${script}" | tr -d '\t' > ${script_location}
  chmod +x ${script_location}

  # Make the plist and load it
  plist="<?xml version='1.0' encoding='UTF-8'?>
  <!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN
  http://www.apple.com/DTDs/PropertyList-1.0.dtd>
  <plist version='1.0'>
  <dict>
  <key>Label</key>
  <string>${label}</string>
  <key>Program</key>
  <string>${script_location}</string>
  <key>StartCalendarInterval</key>
  <array>
  <dict>
  <key>Month</key>
  <integer>${month}</integer>
  <key>Day</key>
  <integer>${day}</integer>
  <key>Hour</key>
  <integer>${hour}</integer>
  <key>Minute</key>
  <integer>${minute}</integer>
  </dict>
  </array>
  </dict>
  </plist>"

  echo "${plist}" | tr -d '\t' > ${agent}
  launchctl load ${agent}
done
