#!/bin/bash

readonly program="$(basename "$0")"

syntax_error() {
  echo "$program: $1" >&2
  echo "Try \`$program --help\` for more information." >&2
  exit 1
}

# This script depends on imagemagick for the conversion
# -----------------------------------------------------
dependsOn() {
  if [[ ! $(which "${1}") ]]; then
    echo -e >&2 "\n$(tput setaf 1)This script requires ${1}. Please install it first.$(tput sgr0)\n"
    exit 1
  fi
}

dependsOn convert

# Instructions on how to use the script
# Shown with '-h', or when no arguments are given
# -----------------------------------------------
usage() {
echo "usage: $program [-h] [-s <num>] [-e <num>] <input_files> <output_file>

options:
   -h, --help                     Show this message
   -s <num>, --start-rate <num>   The original frame rate of the movie that had the images (defaults to 60)
   -e <num>, --end-rate <num>     The new frame rate the gif should have, so it's not slowed down (defaults to 10)"
}

if [[ -z ${1} ]]; then
  usage
  exit 1
fi

# Set some defaults
# -----------------
beginRate="60"
endRate="10"

# Available flags to use with the script
# --------------------------------------
while [[ "$1" ]]; do
  case "$1" in
    -h | --help)
      usage
      exit 0
      ;;
    -s | --start-rate)
      beginRate="$2"
      shift
      ;;
    -e | --end-rate)
      endRate="$2"
      shift
      ;;
    -*)
      syntax_error "unrecognized option: $1"
      ;;
    *)
      break
      ;;
  esac
  shift
done

# Calculate the frame drop rate
# -----------------------------
rateCalculation="$((${beginRate} / ${endRate}))"

# Add only the necessary images to an array
# -----------------------------------------
for (( i = 1; i < $#; i += ${rateCalculation} )); do
  imagesArray+=("${!i}")
done

# Make the animated gif
# ---------------------
convert -dispose Background "${imagesArray[@]}" -layers Optimize "${!#}"
