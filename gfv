#!/bin/bash

readonly program="$(basename "${0}")"
readonly cap_fps='30'
output_file='output.gif'

function depends_on {
  local dep="${1}"

  if ! command -v "${dep}" &>/dev/null; then
    echo -e >&2 "\n$(tput setaf 1)This script requires ${dep}. Please install it first.$(tput sgr0)\n"
    exit 1
  fi
}

function syntax_error {
  echo "${program}: ${1}" >&2
  echo "Try \`${program} --help\` for more information." >&2
  exit 1
}

function usage {
  echo "
    usage: ${program} [options] <file>

    options:
      -f <integer>, --fps <integer>          Frames per second. Default is auto-detected from video, capped at ${cap_fps}.
      -w <interger>, --width <integer>       Resize the gif proportionally.
      -o, --output-file <file>               File to output to. Default: output.gif in current directory.
      -g, --gifski                           Use gifski for the conversion.
      -h, --help                             Show this help.
  " | sed -E 's/^ {4}//'
}

# available flags
positional=()
while [[ "${1}" ]]; do
  case "${1}" in
    -h | --help)
      usage
      exit 0
      ;;
    -f | --fps)
      chosen_fps="${2}"
      shift
      ;;
    -w | --width)
      width="${2}"
      shift
      ;;
    -o | --output-file)
      output_file="${2}"
      shift
      ;;
    -g | --gifski)
      depends_on 'gifski'
      use_gifski='true'
      ;;
    -*)
      syntax_error "unrecognized option: ${1}"
      ;;
    *)
      positional+=("${1}")
      ;;
  esac
  shift
done
set -- "${positional[@]}"

if [[ "${#}" -eq 0 ]]; then
  usage
  exit 1
fi

input_file="${1}"

depends_on 'ffmpeg'

# Set FPS
if [[ -z "${chosen_fps}" ]]; then
  depends_on 'ffprobe'

  video_fps="$(ffprobe -loglevel error -select_streams v:0 -of default=noprint_wrappers=1:nokey=1 -show_entries stream=r_frame_rate "${input_file}" | bc)"
  fps="$([[ "${video_fps}" -gt "${cap_fps}" ]] && echo "${cap_fps}" || echo "${video_fps}")"
else
  fps="${chosen_fps}"
fi

# Make the animated gif
if [[ -z "${use_gifski}" ]]; then
  [[ -z "${width}" ]] && width='-1' # Make width same as original video, if none given

  palette="$(mktemp).png"
  ffmpeg -i "${input_file}" -filter_complex "fps=${fps},scale=${width}:-1:flags=lanczos,palettegen" "${palette}"
  ffmpeg -i "${input_file}" -i "${palette}" -filter_complex "fps=${fps},scale=${width}:-1:flags=lanczos[x];[x][1:v]paletteuse" "${output_file}"
else
  readonly tmp_dir="$(mktemp -d)"

  echo 'Extracting images from videoâ€¦'
  ffmpeg -loglevel quiet -i "${input_file}" -filter_complex "fps=${fps}" "${tmp_dir}/output_mage%9d.png"

  options=()
  [[ -n "${width}" ]] && options+=('--width' "${width}")
  options+=('--fps' "${fps}")

  gifski "${tmp_dir}/"* "${options[@]}" --output "${output_file}"
fi
