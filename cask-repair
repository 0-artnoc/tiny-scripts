#!/bin/bash

# location of homebrew-cask tap
caskTap="$(brew --repository)/Library/Taps/caskroom/homebrew-cask"

# exit if not inside the a '/homebrew-cask/Casks' directory
casksDir=$(pwd | perl -pe 's|.*(/homebrew-cask/Casks)$|\1|')
if [[ "${casksDir}" != "/homebrew-cask/Casks" ]]; then
  echo -e "\n$(tput setaf 1)You need to be inside a '/homebrew-cask/Casks' directory$(tput sgr0)\n"
  exit 1
fi

# exit if no argument is given
if [[ -z "$1" ]]; then
  echo "You need to specify a cask name"
  exit 1
fi

# define abort function, that will reset the state
finish() {
    git reset HEAD --hard
    git checkout master
    git branch -D "${caskBranch}"
    # revert state of caskTap
    git --git-dir="${caskTap}/.git/" --work-tree="${caskTap}" clean --force
    git --git-dir="${caskTap}/.git/" --work-tree="${caskTap}" reset HEAD --hard

    # show message
    if [[ "$1" == "abort" ]]; then
      shift
      echo -e "\n$(tput setaf 1)$1$(tput sgr0)\n"
      exit 1
    elif [[ "$1" == "success" ]]; then
      echo -e "\n$(tput setaf 2)Submitted$(tput sgr0)\n"
      exit 0
    fi
}

# set divider function
divide() {
  if [[ $(which hr) ]]; then
    hr -
  else
    echo "--------------------"
  fi
}

# clean the cask's name, and check if it is valid
caskName="$1"
[[ "${caskName}" == *".rb" ]] && caskName=$(echo "${caskName}" | sed 's|\.rb$||')
caskFile="${caskName}.rb"
caskBranch="update-${caskName}"
[[ ! -f "${caskFile}" ]] && finish abort "There is no such cask"

# initial tasks
git pull upstream master
git checkout -b "${caskBranch}"
divide
brew cask home "${caskName}"
cat "${caskFile}"
divide

read -p "Save the new download URL to your clipboard, and type the version (or leave blank to abort)
> " caskVersion
[[ -z "${caskVersion}" ]] && finish abort "You decided to abort"
caskUrl="$(pbpaste)"

# check if the URL sends a 200 HTTP code, else abort
browserHeaders="-H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36'"
caskStatus=$(curl -sIL "${browserHeaders}" "${caskUrl}" | grep '^HTTP' | tail -1 | perl -pe 's|.* (\d{3}) .*|\1|')

# if the download URL is from github, fake the status code
[[ "${caskUrl}" == *"github.com"* ]] && caskStatus="200"

if [[ "${caskStatus}" != "200" ]]; then
  if [[ -z "${caskStatus}" ]]; then
    finish abort "You need to have a valid URL in your clipboard"
  else
    finish abort "Download URL returned ${caskStatus}"
  fi
fi

# calculate new sha256, if not using 'latest' version
if [[ "${caskVersion}" == "latest" ]]; then
  caskSha=":no_ckeck"
else
  caskSha=$(curl -#L "${browserHeaders}" "${caskUrl}" | shasum -a 256 | sed 's| .*||' | tr -d '\n')
fi

# modify url, version, and sha256
sed -i '' "s|url '.*'|url '${caskUrl}'|;s|version '.*'|version '${caskVersion}'|;s|sha256 '.*'|sha256 '${caskSha}'|" "${caskFile}"

# check if everything is alright, else abort
caskUpdated="not checked"
while [[ "${caskUpdated}" =~ [^y|^n|^e] ]]; do
  # audit cask
  cp "${caskFile}" "${caskTap}/Casks/"
  brew cask audit "${caskName}"

  git diff

  read -p "Is everything correct? You can also make further manual edits (y/n/e) " caskUpdated

  if [[ "${caskUpdated}" == "y" ]]; then
    break
  elif [[ "${caskUpdated}" == "e" ]]; then
    vim "${caskFile}"
    caskUpdated="check again"
  elif [[ "${caskUpdated}" == "n" ]]; then
    finish abort "You decided to abort"
  fi
done

# commit, push, clean
git commit "${caskFile}" -m "updated ${caskName} (${caskVersion})"
git push origin "${caskBranch}"

# cleanup
finish success
