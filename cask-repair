#!/bin/bash

# location of homebrew-cask tap
cask_tap="$(brew --repository)/Library/Taps/caskroom/homebrew-cask"

# exit if not inside a '/homebrew-cask/Casks' directory
casks_dir=$(pwd | perl -pe 's|.*(/homebrew-cask/Casks)$|\1|')
if [[ "${casks_dir}" != "/homebrew-cask/Casks" ]]; then
  echo -e "\n$(tput setaf 1)You need to be inside a '/homebrew-cask/Casks' directory$(tput sgr0)\n"
  exit 1
fi

# exit if no argument is given
if [[ -z "$1" ]]; then
  echo "You need to specify a cask name"
  exit 1
fi

# define abort function, that will reset the state
finish() {
  git reset HEAD --hard
  git checkout master
  git branch -D "${cask_branch}"
  # revert state of cask_tap
  git --git-dir="${cask_tap}/.git/" --work-tree="${cask_tap}" clean --force
  git --git-dir="${cask_tap}/.git/" --work-tree="${cask_tap}" reset HEAD --hard

  # show message
  if [[ "$1" == "abort" ]]; then
    echo -e "\n$(tput setaf 1)$2$(tput sgr0)\n"
    exit 1
  elif [[ "$1" == "success" ]]; then
    echo -e "\n$(tput setaf 2)Submitted$(tput sgr0)\n"
    exit 0
  fi
}

# cleanup if aborted with âŒƒC
trap 'finish abort "You decided to abort"' SIGINT

# define divider function
divide() {
  if [[ $(which hr) ]]; then
    hr -
  else
    echo "--------------------"
  fi
}

# clean the cask's name, and check if it is valid
cask_name="$1"
[[ "${cask_name}" == *".rb" ]] && cask_name=$(echo "${cask_name}" | sed 's|\.rb$||')
cask_file="${cask_name}.rb"
cask_branch="update-${cask_name}"
[[ ! -f "${cask_file}" ]] && finish abort "There is no such cask"

# initial tasks
git pull upstream master
git checkout -b "${cask_branch}"

# check if cask's url is always up to date
cask_old_url_stanza=$(grep "url '.*'" "${cask_file}" | sed -E "s|.*url '(.*)'.*|\1|")
[[ cask_old_url_stanza =~ '#{version.*}' ]] && cask_url_up_to_date='true'

# show cask's current state
divide
brew cask home "${cask_name}"
cat "${cask_file}"
divide

# if url is always up to date, use it; else open cask's home and ask for it
if [[ "${cask_url_up_to_date}" ]]; then
  read -p "Type the version (or leave blank to abort)
> " cask_version
else
  read -p "Save the new download URL to your clipboard, and type the version (or leave blank to abort)
> " cask_version
  cask_url="$(pbpaste)"

  # check if the URL sends a 200 HTTP code, else abort
  browser_headers="-H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36'"
  cask_status=$(curl -sIL "${browser_headers}" "${cask_url}" | grep '^HTTP' | tail -1 | perl -pe 's|.* (\d{3}) .*|\1|')

  # if the download URL is from github or bitbucket, fake the status code
  [[ "${cask_url}" =~ (github.com|bitbucket.org) ]] && cask_status="200"

  if [[ "${cask_status}" != "200" ]]; then
    if [[ -z "${cask_status}" ]]; then
      finish abort "You need to have a valid URL in your clipboard"
    else
      finish abort "Download URL returned ${cask_status}"
    fi
  fi

  # modify url to the new one
  sed -i '' "s|url '.*'|url '${cask_url}'"
fi

[[ -z "${cask_version}" ]] && finish abort "You decided to abort"

# calculate new sha, if not using 'latest' version
if [[ "${cask_version}" =~ "[:]{0,1}latest" ]]; then
  cask_version=':latest'
  cask_sha=':no_check'
else
  cask_version="'${cask_version}'"

  rm -rf "$(brew --cache)" # clean homebrew's cache in advance
  brew cask fetch "${cask_file}"
  downloaded_file=$(find "$(brew --cache)" -type f)
  cask_sha=$(shasum -a 256 "${cask_file}" | awk '{ print $1 }' | sed -E "s|(.*)|'\1'|")
fi

# modify version and sha256
sed -i '' "s|version '.*'|version ${cask_version}|;s|sha256 '.*'|sha256 ${cask_sha}|" "${cask_file}"

# check if everything is alright, else abort
cask_updated="not checked"
while [[ "${cask_updated}" =~ [^y|^n|^e] ]]; do
  # audit cask
  cp "${cask_file}" "${cask_tap}/Casks/"
  brew cask audit "${cask_name}"

  git diff

  read -p "Is everything correct? You can also make further manual edits (y/n/e) " cask_updated

  if [[ "${cask_updated}" == "y" ]]; then
    break
  elif [[ "${cask_updated}" == "e" ]]; then
    vim "${cask_file}"
    cask_updated="check again"
  elif [[ "${cask_updated}" == "n" ]]; then
    finish abort "You decided to abort"
  fi
done

# commit, push, clean
git commit "${cask_file}" -m "updated ${cask_name} (${cask_version})"
git push origin "${cask_branch}"

# cleanup
finish success
